ShooterGame = {

    /* Here we've just got some global level vars that persist regardless of State swaps */
    score: 0,

    /* If the music in your game needs to play through-out a few State swaps, then you could reference it here */
    music: null,

    /* Your game can check ShooterGame.orientated in internal loops to know if it should pause or not */
    orientated: false

};

ShooterGame.Boot = function (game) {
};

ShooterGame.Boot.prototype = {

    preload: function () {

        //  Here we load the assets required for our preloader (in this case a background and a loading bar)
        //this.load.image('preloaderBackground', 'images/preloader_background.jpg');
        this.load.image('preloaderBar', 'assets/image/preloader_bar.png');

    },

    create: function () {

        this.input.maxPointers = 1;
        this.stage.disableVisibilityChange = true;

        if (this.game.device.desktop)
        {
            this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            this.scale.minWidth = 640 * 0.5;
            this.scale.minHeight = 1136 * 0.5;
            this.scale.maxWidth = 640;
            this.scale.maxHeight = 1136;
            this.scale.pageAlignHorizontally = true;
            this.scale.pageAlignVertically = true;
            this.scale.setScreenSize(true);
        }
        else
        {            
            this.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT;
            this.scale.minWidth = 640 * 0.5;
            this.scale.minHeight = 1136 * 0.5;
            this.scale.maxWidth = 640;
            this.scale.maxHeight = 1136;
            this.scale.pageAlignHorizontally = true;
            this.scale.pageAlignVertically = true;
            this.scale.forceOrientation(false, true);
            this.scale.hasResized.add(this.gameResized, this);
            this.scale.enterIncorrectOrientation.add(this.enterIncorrectOrientation, this);
            this.scale.leaveIncorrectOrientation.add(this.leaveIncorrectOrientation, this);
            this.scale.setScreenSize(true); 
        }

        this.state.start('Preloader');

    },

    gameResized: function (width, height) {

        //  This could be handy if you need to do any extra processing if the game resizes.
        //  A resize could happen if for example swapping orientation on a device.

    },

    enterIncorrectOrientation: function () {

        ShooterGame.orientated = false;

        document.getElementById('orientation').style.display = 'block';

    },

    leaveIncorrectOrientation: function () {

        ShooterGame.orientated = true;

        document.getElementById('orientation').style.display = 'none';

    }

};;ShooterGame.MainMenu = function (game) {

	this.music = null;
	this.playButton = null;

};

ShooterGame.MainMenu.prototype = {

	create: function () {

		console.log("main menu");

		//	We've already preloaded our assets, so let's kick right into the Main Menu itself.
		//	Here all we're doing is playing some music and adding a picture and button
		//	Naturally I expect you to do something significantly better :)

		//this.music = this.add.audio('titleMusic');
		//this.music.play();

		

		this.playButton = this.add.button(this.game.world.centerX, this.game.world.centerY, 'main', this.startGame, this);
		this.playButton.anchor.setTo(0.5, 0.5);
		this.playButton.frameName = 'play_btn';

		//shortcut to game


	},

	update: function () {

		//	Do some nice funky main menu effect here

	},

	startGame: function (pointer) {

		// Launch fullscreen for browsers that support it!
        //this.launchFullscreen(document.documentElement); // the whole page

		//	Ok, the Play Button has been clicked or touched, so let's stop the music (otherwise it'll carry on playing)
		//this.music.stop();
		this.playButton.scale = 0.9
		//	And start the actual game
		this.state.start('Game');

	},


    launchFullscreen: function (element) {
        
        if(element.requestFullscreen) {
            element.requestFullscreen();
        } else if(element.mozRequestFullScreen) {
            element.mozRequestFullScreen();
        } else if(element.webkitRequestFullscreen) {
            element.webkitRequestFullscreen();
        } else if(element.msRequestFullscreen) {
            element.msRequestFullscreen();
        }

        console.log('fullscreen', element);
    }

};;ShooterGame.Preloader = function (game) {

	this.background = null;
	this.preloadBar = null;

	this.ready = false;

};

ShooterGame.Preloader.prototype = {

	preload: function () {

		//	These are the assets we loaded in Boot.js
		//	A nice sparkly background and a loading progress bar
		//this.background = this.add.sprite(0, 0, 'preloaderBackground');
		this.preloadBar = this.add.sprite(222, 39, 'preloaderBar');

		//	This sets the preloadBar sprite as a loader sprite.
		//	What that does is automatically crop the sprite from 0 to full-width
		//	as the files below are loaded in.
		this.load.setPreloadSprite(this.preloadBar);

		//	Here we load the rest of the assets our game needs.
		//	As this is just a Project Template I've not provided these assets, the lines below won't work as the files themselves will 404, they are just an example of use.
		
		/*this.load.image('titlepage', 'images/title.jpg');
		this.load.audio('titleMusic', ['audio/main_menu.mp3']);
		this.load.bitmapFont('caslon', 'fonts/caslon.png', 'fonts/caslon.xml');*/

		this.load.atlasXML('main', 'assets/image/main.png', 'assets/image/main.xml');

		//	+ lots of other required assets here

	},

	create: function () {

		//	Once the load has finished we disable the crop because we're going to sit in the update loop for a short while as the music decodes
		this.preloadBar.cropEnabled = false;

		this.state.start('MainMenu');

	},

	update: function () {

		//	You don't actually need to do this, but I find it gives a much smoother game experience.
		//	Basically it will wait for our audio file to be decoded before proceeding to the MainMenu.
		//	You can jump right into the menu if you want and still play the music, but you'll have a few
		//	seconds of delay while the mp3 decodes - so if you need your music to be in-sync with your menu
		//	it's best to wait for it to decode here first, then carry on.

		//	If you don't have any music in your game then put the game.state.start line into the create function and delete
		//	the update function completely.

		/*if (this.cache.isSoundDecoded('titleMusic') && this.ready == false)
		{
			this.ready = true;
			this.state.start('MainMenu');
		}*/

	}

};;ShooterGame.Background = function(game) {
	this.game = game;
	this.tileSprite = null;
};

ShooterGame.Background.prototype = {
	create: function() {
		this.tileSprite = this.game.add.tileSprite(0, 0, 640, 1136, 'main', 'Backgrounds/darkPurpleRect');
	},

	update: function() {
		this.tileSprite.tilePosition.y += 3;
	}
};;ShooterGame.Enemy = function(game, delay) {

	Phaser.Sprite.call(this, game, 0, 0, 'main');
	//this.sprite = this.game.add.sprite(this.game.world.centerX, -60, 'main');
    this.anchor.setTo(0.5,0.5);
    this.frameName = "Enemies/enemyGreen5";
    this.game.physics.enable(this, Phaser.Physics.ARCADE);
    this.body.allowRotation = false;
	this.sprite = null;
	this.Yspeed = 200;
	this.Xspeed = 0.045;
	this.delay = delay;
	this.reset();

	game.add.existing(this);

};
ShooterGame.Enemy.prototype = Object.create(Phaser.Sprite.prototype);
ShooterGame.Enemy.prototype.constructor = ShooterGame.Enemy;

	ShooterGame.Enemy.prototype.loseHealth =  function( power ) {
		this.health -= power;
		if(this.health <= 0) {
			this.reset();
		}
	};

	ShooterGame.Enemy.prototype.reset = function () {
		this.body.velocity.x = 0;
		this.body.velocity.y = 0;
		this.x = this.width * 0.5;;
		this.y = -120 * (this.delay + 1);
		console.log(this.y);
		this.count = 0;
		this.health = 10;
	};

	ShooterGame.Enemy.prototype.update = function() {

		this.body.velocity.x = (Math.sin(this.count) * (this.game.world.width + this.width)) * ((1/60) / this.game.time.physicsElapsed);
		//console.log( (1/60) / this.game.time.physicsElapsed, this.game.time.physicsElapsed);	
		this.body.velocity.y = this.Yspeed;
		this.count += this.Xspeed;
		if(this.y > this.game.height + this.height * 0.5) {
			this.reset();
		}

		/*
			rotation =  Math.sin(_count) * 5;
			_count += _countIncrement;
		*/
	};
;ShooterGame.Player = function (game) {
	this.game = game;
    this.sprite = null;
    this.lives = 3;
};

ShooterGame.Player.prototype = {
	preload: function() {

	},

	create: function() {
		this.sprite = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'main');
        this.sprite.anchor.setTo(0.5,0.5);
        this.sprite.frameName = "playerShip2_red";
        this.game.physics.enable(this.sprite, Phaser.Physics.ARCADE);
        this.sprite.body.allowRotation = false;		
	},

    loseLife: function() {
        this.lives -= 1;
        if(this.lives < 0) {
            //die
            console.log('you dead...');
        }
    },

	update: function() {

		var deadzone = this.sprite.width/3;

		

       if (this.game.input.activePointer.circle.contains(this.sprite.x, this.sprite.y)) {
            this.sprite.body.velocity.x = 0;
            this.sprite.body.velocity.y = 0;
        }

        if(this.game.input.activePointer.x > (this.sprite.x + deadzone)) {
            this.sprite.angle = 6;
            this.game.physics.arcade.moveToPointer(this.sprite, 800);
        } else if(this.game.input.activePointer.x < (this.sprite.x - deadzone)) {
            this.sprite.angle = -6;
            this.game.physics.arcade.moveToPointer(this.sprite, 800);
        }
        else {
            this.sprite.angle = 0;
        }
	} 
};;ShooterGame.Weapon = function(game, player) {
	this.game = game;
	this.player = player;
	this.bullets = null;
	this.strength = 1;
};

ShooterGame.Weapon.prototype = {
	preload: function() {

	},

	create: function() {
		this.bullets = this.game.add.group();
        this.bullets.createMultiple(100, 'main', 0, false);

        this.game.time.events.loop(1000, this.fire, this);
	},

	fire: function () {
        var bullet = this.bullets.getFirstExists(false);
        if(bullet) {
	       	bullet.frameName = "Lasers/laserBlue06"; // random laser + this.game.rnd.between(1,6);
	       	bullet.anchor.set(0.5, 0.5);
	        bullet.exists = true;
	        bullet.reset(this.player.sprite.x, this.player.sprite.y - 15);
	        this.game.physics.enable(this.bullets, Phaser.Physics.ARCADE);
	        bullet.body.allowRotation = false;
	        bullet.body.velocity.y = -400;
	    }
    },

	update: function() {
		this.bullets.forEachAlive(this.checkBounds, this);
	},

	checkBounds: function (bullet) {
        if(bullet.y < -10) {
            bullet.kill();
        }
    }
	
};;ShooterGame.Game = function (game) {

	//	When a State is added to Phaser it automatically has the following properties set on it, even if they already exist:

    this.game;		//	a reference to the currently running game
    this.add;		//	used to add sprites, text, groups, etc
    this.camera;	//	a reference to the game camera
    this.cache;		//	the game cache
    this.input;		//	the global input manager (you can access this.input.keyboard, this.input.mouse, as well from it)
    this.load;		//	for preloading assets
    this.math;		//	lots of useful common math operations
    this.sound;		//	the sound manager - add a sound, play one, set-up markers, etc
    this.stage;		//	the game stage
    this.time;		//	the clock
    this.tweens;	//	the tween manager
    this.world;		//	the game world
    this.particles;	//	the particle manager
    this.physics;	//	the physics manager
    this.rnd;		//	the repeatable random number generator

    //	You can use any of these from any function within this State.
    //	But do consider them as being 'reserved words', i.e. don't create a property for your own game called "world" or you'll over-write the world reference.


    var player;
    var enemies;
    var weapon;
    var background;
};



ShooterGame.Game.prototype = {

	create: function () {

        console.log("game");

        background = new ShooterGame.Background(this.game);
        background.create();

        player = new ShooterGame.Player(this.game);
        player.create();

        enemies = this.game.add.group();
        for (var i = 0; i < 10; i++) {
            enemies.add(new ShooterGame.Enemy(this.game, i) );
        };

        weapon = new ShooterGame.Weapon(this.game, player);
        weapon.create();
	},  

	update: function () {
        player.update();
        weapon.update();
        background.update();

        //check for enemy / weapon / player collisions
        this.game.physics.arcade.overlap(weapon.bullets, enemies, this.onBulletEnemyCollision, null, this);

	}, 

    onBulletEnemyCollision: function (bullet, enemy) {
        enemy.loseHealth(weapon.strength);
        bullet.kill();
    },

	quitGame: function (pointer) {
        
		//	Here you should destroy anything you no longer need.
		//	Stop music, delete sprites, purge caches, free resources, all that good stuff.

		//	Then let's go back to the main menu.
		this.state.start('MainMenu');

	},

    render: function () {
    }

};

   